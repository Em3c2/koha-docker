031-API-biblios-CRUD

Patch to enable full CRUD on /api/v1/biblios
TODO: more work on update (PUT) and perhaps delete all items on DELETE as default

diff --git a/Koha/REST/V1/Biblio.pm b/Koha/REST/V1/Biblio.pm
index 3825728..010188d 100644
--- a/Koha/REST/V1/Biblio.pm
+++ b/Koha/REST/V1/Biblio.pm
@@ -19,11 +19,17 @@ use Modern::Perl;
 
 use Mojo::Base 'Mojolicious::Controller';
 
-use C4::Biblio qw( GetBiblioData );
+use C4::Auth qw( haspermission );
+use Koha::AuthUtils qw(hash_password);
+use C4::Biblio qw( GetBiblioData AddBiblio ModBiblio DelBiblio );
+use C4::Items qw ( AddItemBatchFromMarc );
 use Koha::Biblios;
-use Koha::Holds;
+use MARC::Record;
+use MARC::Batch;
+use MARC::File::USMARC;
+use MARC::File::XML;
 
-#use Data::Dumper;
+use Data::Dumper;
 
 sub get {
     my ($c, $args, $cb) = @_;
@@ -38,6 +44,7 @@ sub get {
 sub getitems {
     my ($c, $args, $cb) = @_;
 
+    #my $biblio = &GetBiblioData($args->{biblionumber});
     my $biblio = Koha::Biblios->find($args->{biblionumber});
     unless ($biblio) {
         return $c->$cb({error => "Biblio not found"}, 404);
@@ -82,4 +89,100 @@ sub getexpanded {
     return $c->$cb({ biblio => $biblio->unblessed, items => $expanded }, 200);
 }
 
+sub add {
+    my ($c, $args, $cb) = @_;
+
+    my $user = $c->stash('koha.user');
+
+    unless ( $user && haspermission($user->userid, {borrowers => 1}) ) {
+        return $c->$cb({error => "You don't have the required permission"}, 403);
+    }
+    my $biblionumber;
+    my $biblioitemnumber;
+
+    my $body = $c->req->body;
+    my $record = eval {MARC::Record::new_from_xml( $body, "utf8", '')};
+    if ($@) {
+        return $c->$cb({error => $@}, 400);
+    } else {
+        ( $biblionumber, $biblioitemnumber ) = &AddBiblio($record, '');
+    }
+    if ($biblionumber) {
+        $c->res->headers->location($c->url_for('/v1/biblios/')->to_abs . $biblionumber);
+        my ( $itemnumbers, $errors ) = &AddItemBatchFromMarc( $record, $biblionumber, $biblioitemnumber, '' );
+        unless (@{$errors}) {
+            return $c->$cb({biblionumber => $biblionumber, items => join(",", @{$itemnumbers})}, 201);
+        } else {
+            warn Dumper($errors);
+            return $c->$cb({error => "Error creating items, see Koha Logs for details.", biblionumber => $biblionumber, items => join(",", @{$itemnumbers})}, 400);
+        }
+    } else {
+        return $c->$cb({error => "unable to create record"}, 400);
+    }
+}
+
+# TODO: Check this
+sub update {
+    my ($c, $args, $cb) = @_;
+
+    my $user = $c->stash('koha.user');
+
+    unless ( $user && haspermission($user->userid, {borrowers => 1}) ) {
+        return $c->$cb({error => "You don't have the required permission"}, 403);
+    }
+    my $biblionumber = $args->{biblionumber};
+    my $biblioitemnumber = $biblionumber;
+
+    my $biblio = Koha::Biblios->find($biblionumber);
+    unless ($biblio) {
+        return $c->$cb({error => "Biblio not found"}, 404);
+    }
+
+    my $success;
+    my $body = $c->req->body;
+    my $record = eval {MARC::Record::new_from_xml( $body, "utf8", '')};
+    if ($@) {
+        return $c->$cb({error => $@}, 400);
+    } else {
+        $success = &ModBiblio($record, $biblionumber, '');
+    }
+    if ($success) {
+        $c->res->headers->location($c->url_for('/v1/biblios/')->to_abs . $biblionumber);
+        my ( $itemnumbers, $errors ) = &AddItemBatchFromMarc( $record, $biblionumber, $biblioitemnumber, '' );
+        unless (@{$errors}) {
+            return $c->$cb({biblionumber => $biblionumber, items => join(",", @{$itemnumbers})}, 201);
+        } else {
+            warn Dumper($errors);
+            return $c->$cb({error => "Error creating items, see Koha Logs for details.", biblionumber => $biblionumber, items => join(",", @{$itemnumbers})}, 400);
+        }
+    } else {
+        return $c->$cb({error => "unable to update record"}, 400);
+    }
+
+    return $c->$cb({result => $success}, 200);
+}
+
+sub delete {
+    my ($c, $args, $cb) = @_;
+    my $user = $c->stash('koha.user');
+
+    unless ( $user && haspermission($user->userid, {borrowers => 1}) ) {
+        return $c->$cb({error => "You don't have the required permission"}, 403);
+    }
+
+    my $biblio = Koha::Biblios->find($args->{biblionumber});
+    unless ($biblio) {
+        return $c->$cb({error => "Biblio not found"}, 404);
+    }
+    my $error = &DelBiblio($args->{biblionumber});
+
+    unless ($error) {
+        return $c->$cb({}, 200);
+    } elsif ($error eq '-1') {
+        return $c->$cb({error => "Error code: " . $error}, 404);
+    } else {
+        return $c->$cb({error => $error}, 400);
+    }
+}
+
 1;
diff --git a/api/v1/swagger.json b/api/v1/swagger.json
index 4b17f5b..f6b194f 100644
--- a/api/v1/swagger.json
+++ b/api/v1/swagger.json
@@ -120,6 +120,7 @@
               "$ref": "#/definitions/error"
             }
           }
+        }
       },
       "put": {
         "operationId": "editPatron",
@@ -208,7 +209,6 @@
             "schema": { "$ref": "#/definitions/error" }
           }
         }
-        }
       }
     },
     "/holds": {
@@ -547,6 +547,7 @@
             "type": "integer"
           }
         ],
+        "consumes": ["application/json"],
         "produces": ["application/json"],
         "responses": {
           "200": {
@@ -656,6 +657,12 @@
             "schema": {
               "$ref": "#/definitions/error"
             }
+          },
+          "404": {
+            "description": "Item not found",
+            "schema": {
+              "$ref": "#/definitions/error"
+            }
           }
         }
       }
@@ -689,6 +696,65 @@
             }
           }
         }
+      },
+      "put": {
+        "operationId": "updateBiblio",
+        "tags": ["biblios"],
+        "parameters": [
+          { "$ref": "#/parameters/biblionumberPathParam" }
+        ],
+        "produces": [
+          "application/json"
+        ],
+        "responses": {
+          "200": {
+            "description": "An updated biblio record",
+            "schema": { "$ref": "#/definitions/biblio" }
+
+          },
+          "403": {
+            "description": "Access forbidden",
+            "schema": {
+              "$ref": "#/definitions/error"
+            }
+          },
+          "404": {
+            "description": "Biblio not found",
+            "schema": {
+              "$ref": "#/definitions/error"
+            }
+          }
+        }
+      },
+      "delete": {
+        "operationId": "deleteBiblio",
+        "tags": ["biblios"],
+        "parameters": [
+          { "$ref": "#/parameters/biblionumberPathParam" }
+        ],
+        "produces": ["application/json"],
+        "responses": {
+          "200": {
+            "description": "Biblio record deleted successfully",
+            "schema": {
+              "type": "object"
+            }
+          },
+          "400": {
+            "description": "Biblio deletion failed",
+            "schema": { "$ref": "#/definitions/error" }
+          },
+          "403": {
+            "description": "Access forbidden",
+            "schema": {
+              "$ref": "#/definitions/error"
+            }
+          },
+          "404": {
+            "description": "Biblio not found",
+            "schema": { "$ref": "#/definitions/error" }
+          }
+        }
       }
     },
     "/biblios/{biblionumber}/items": {
@@ -749,6 +815,28 @@
         }
       }
     },
+    "/biblios": {
+      "post": {
+        "operationId": "addBiblio",
+        "tags": ["biblios"],
+        "produces": ["application/json"],
+        "responses": {
+          "201": {
+            "description": "A new biblio record"
+          },
+          "400": {
+            "description": "Unable to create biblio record",
+            "schema": { "$ref": "#/definitions/error" }
+          },
+          "403": {
+            "description": "Access forbidden",
+            "schema": {
+              "$ref": "#/definitions/error"
+            }
+          }
+        }
+      }
+    },
     "/messagepreferences/{borrowernumber}": {
       "get": {
         "operationId": "getMessagepreferencesByUser",
@@ -783,6 +871,9 @@
         "parameters": [
           {
             "$ref": "#/parameters/borrowernumberPathParam"
+          },
+          {
+            "$ref": "#/parameters/messagepreferencesBodyParam"
           }
         ],
         "consumes": ["application/json"],
@@ -845,7 +936,41 @@
       "description": "Internal biblio identifier",
       "required": true,
       "type": "integer"
+    },
+    "messagepreferencesBodyParam": {
+      "name": "body",
+      "in": "body",
+      "description": "A JSON object containing fields to modify",
+      "required": true,
+      "schema": {
+        "type": "object",
+        "properties": {
+          "item_due": {
+            "description": "Notice on checkout passed due date",
+            "type": "string",
+            "minimum": 1
+          },
+          "advance_notice": {
+            "description": "Notice on number of days before due date",
+            "type": "integer"
+          },
+          "hold_filled": {
+            "description": "Notice on hold awaiting pickup",
+            "type": "string",
+            "format": "date"
+          },
+          "item_check_in": {
+            "description": "Notice on checkin",
+            "type": "string",
+            "format": "date"
+          },
+          "item_checkout": {
+            "description": "Notice on checkout",
+            "type": "string",
+            "format": "date"
+          }
+        }
+      }
     }
   }
 }
-
