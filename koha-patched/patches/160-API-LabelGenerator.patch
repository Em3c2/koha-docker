160-API-LabelGenerator

Patch to extend API to allow item lookup by barcode and return 
information needed for label generation.

diff --git a/Koha/REST/V1/LabelGenerator.pm b/Koha/REST/V1/LabelGenerator.pm
new file mode 100644
index 0000000..8c41dc0
--- /dev/null
+++ b/Koha/REST/V1/LabelGenerator.pm
@@ -0,0 +1,53 @@
+package Koha::REST::V1::LabelGenerator;
+# This file is part of Koha.
+#
+# Koha is free software; you can redistribute it and/or modify it under the
+# terms of the GNU General Public License as published by the Free Software
+# Foundation; either version 3 of the License, or (at your option) any later
+# version.
+#
+# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License along
+# with Koha; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+use Modern::Perl;
+
+use Mojo::Base 'Mojolicious::Controller';
+
+use Koha::Biblios;
+use Koha::Items;
+use Data::Dumper;
+
+sub getlabel {
+    my ($c, $args, $cb) = @_;
+
+    my $items = Koha::Items->search({ barcode => $args->{barcode} })->unblessed;
+    unless (scalar(@{$items}) > 0) {
+        return $c->$cb({error => "No items found"}, 404);
+    }
+    my $item = $items->[0];
+    my $biblio = Koha::Biblios->find($item->{biblionumber})->unblessed;
+    unless ($biblio) {
+        return $c->$cb({error => "No attached biblio found"}, 404);
+    }
+    my $label = {
+        barcode => $item->{barcode},
+        biblio => $item->{biblionumber},
+        title => $biblio->{title},
+        creator => $biblio->{author},
+        publicationDate => $biblio->{copyrightdate},
+        homeBranch => $item->{homebranch},
+        holdingBranch => $item->{holdingbranch},
+        callNumber => $item->{itemcallnumber},
+        shelvingLocation => $item->{location},
+        copyNumber => $item->{copynumber}
+    };
+
+    return $c->$cb($label, 200);
+}
+
+1;
diff --git a/api/v1/swagger/paths.json b/api/v1/swagger/paths.json
index 274ea3d..1403022 100644
--- a/api/v1/swagger/paths.json
+++ b/api/v1/swagger/paths.json
@@ -49,5 +49,8 @@
   },
   "/patronsyncdefaults/{borrowernumber}": {
     "$ref": "paths/norwegianpatrondb.json#/~1patronsyncdefaults~1{borrowernumber}"
+  },
+  "/labelgenerator/{barcode}": {
+    "$ref": "paths/labelgenerator.json#/~1labelgenerator~1{barcode}"
   }
 }
diff --git a/api/v1/swagger/paths/labelgenerator.json b/api/v1/swagger/paths/labelgenerator.json
new file mode 100644
index 0000000..29c9ed0
--- /dev/null
+++ b/api/v1/swagger/paths/labelgenerator.json
@@ -0,0 +1,25 @@
+{
+  "/labelgenerator/{barcode}": {
+    "get": {
+      "operationId": "getlabelFromLabelGenerator",
+      "tags": ["biblios", "items"],
+      "produces": ["application/json"],
+      "parameters": [
+        {
+          "$ref": "../parameters.json#/barcodePathParam"
+        }
+      ],
+      "responses": {
+        "200": {
+          "description": "Label generator details"
+        },
+        "404": {
+          "description": "Barcode not found",
+          "schema": {
+            "$ref": "../definitions.json#/error"
+          }
+        }
+      }
+    }
+  }
+}
