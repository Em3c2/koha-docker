170-API-Messaging

Patch to extend API with messaging
Available routes:
  PUT /api/v1/messaging/patrons/{borrowernumber}/accountdetails

diff --git a/Koha/REST/V1/Messaging.pm b/Koha/REST/V1/Messaging.pm
new file mode 100644
index 0000000..513a059
--- /dev/null
+++ b/Koha/REST/V1/Messaging.pm
@@ -0,0 +1,93 @@
+package Koha::REST::V1::Messaging;
+
+# This file is part of Koha.
+#
+# Koha is free software; you can redistribute it and/or modify it under the
+# terms of the GNU General Public License as published by the Free Software
+# Foundation; either version 3 of the License, or (at your option) any later
+# version.
+#
+# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License along
+# with Koha; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+use Modern::Perl;
+
+use Mojo::Base 'Mojolicious::Controller';
+use C4::Letters qw( GetPreparedLetter );
+use Koha::NorwegianPatronDB qw( NLDecodePin );
+use Mail::Sendmail;
+use Koha::Libraries;
+use Koha::Patrons;
+use Koha::Email;
+
+use Data::Dumper;
+
+sub send_patron_account_details {
+	my ($c, $args, $cb) = @_;
+
+    my $patron = Koha::Patrons->find($args->{borrowernumber});
+    unless ($patron) {
+        return $c->$cb({error => "Patron not found"}, 404);
+    }
+
+	unless ($patron->email) {
+		return $c->$cb({error => "Invalid or no email address"}, 400);
+	}
+
+	my $library = Koha::Libraries->find( $patron->branchcode );
+
+	#https://github.com/Koha-Community/Koha/blob/master/C4/Letters.pm#L596
+    my $letter = GetPreparedLetter (
+        module => 'members',
+        letter_code => 'ACCTDETAILS',
+        branchcode => $patron->branchcode, # override default letter with branchcode letter if existing
+        tables => {
+            'branches'    => $library->unblessed,
+            'borrowers' => $args->{borrowernumber},
+        },
+        substitute => { 'borrowers.password' => $patron->password },
+	);
+
+    my $mail = _dispatch($letter, $patron, $library);
+    if ($mail) {
+    	return $c->$cb({}, 200);
+	} else {
+		return $c->$cb({error => "Failed sending message"}, 400);
+	}
+
+}
+
+# dispatch letter to patron
+sub _dispatch {
+	my ($letter, $patron, $library) = @_;
+	my $mail = Koha::Email->new();
+    my %dispatcher = $mail->create_message_headers(
+        {
+            to      => $patron->email,
+            from    => $library->branchemail,
+            replyto => $library->branchreplyto,
+            sender  => $library->branchreturnpath,
+            subject => Encode::encode( "UTF-8", "" . $letter->{'title'} ),
+            message => $letter->{'is_html'}
+                        ? "<html><body>"  . Encode::encode( "UTF-8", $letter->{'content'} ) . "</body></html>"
+                        : Encode::encode( "UTF-8", "" . $letter->{'content'} ),
+            contenttype => $letter->{'is_html'}
+                            ? 'text/html; charset="utf-8"'
+                            : 'text/plain; charset="utf-8"',
+        }
+    );
+	my $res = sendmail(%dispatcher);
+    if ($res) {
+		return 1;
+	} else {
+		warn Dumper($res);
+    	return 0;
+	}
+}
+
+1;
diff --git a/api/v1/swagger/paths.json b/api/v1/swagger/paths.json
index 9efdebc..f0189bf 100644
--- a/api/v1/swagger/paths.json
+++ b/api/v1/swagger/paths.json
@@ -55,5 +55,8 @@
   },
   "/labelgenerator/{barcode}": {
     "$ref": "paths/labelgenerator.json#/~1labelgenerator~1{barcode}"
+  },
+  "/messaging/patrons/{borrowernumber}/accountdetails": {
+    "$ref": "paths/messaging.json#/~1messaging~1patrons~1{borrowernumber}~1accountdetails"
   }
 }
diff --git a/api/v1/swagger/paths/messaging.json b/api/v1/swagger/paths/messaging.json
new file mode 100644
index 0000000..9e059eb
--- /dev/null
+++ b/api/v1/swagger/paths/messaging.json
@@ -0,0 +1,38 @@
+{
+  "/messaging/patrons/{borrowernumber}/accountdetails": {
+    "put": {
+      "operationId": "sendPatronAccountDetailsFromMessaging",
+      "tags": ["patrons", "messages"],
+      "parameters": [
+        {
+          "$ref": "../parameters.json#/borrowernumberPathParam"
+        }
+      ],
+      "produces": ["application/json"],
+      "responses": {
+        "200": {
+          "description": "Patron account details sent"
+        },
+        "400": {
+          "description": "Error sending patron account details",
+          "schema": {
+            "$ref": "../definitions.json#/error"
+          }
+        },
+        "404": {
+          "description": "Patron not found",
+          "schema": {
+            "$ref": "../definitions.json#/error"
+          }
+        }
+      },
+      "x-koha-authorization": {
+        "allow-owner": true,
+        "allow-guarantor": true,
+        "permissions": {
+          "borrowers": "1"
+        }
+      }
+    }
+  }
+}
